times = 1)
head(trainIndex)
train <- ards[ trainIndex,]
test  <- ards[-trainIndex,]
#########################################
## Train Control
#########################################
set.seed(21)
## Pre-Compute CV folds so we can use the same ones for all models
CV_folds <- createMultiFolds(train$ECMO_Survival,
k = 5, # 5-fold cross validation
times = 10 # 10 times
)
trControl <- caret::trainControl(
method = "repeatedcv",
index = CV_folds,
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
#########################################
## Logistic Regression + LASSO
#########################################
set.seed(21)
tuneGrid = expand.grid(alpha = 1, ## LASSO regularization
lambda = seq(0.001,0.1,by = 0.001))
ptime <- system.time({
lasso_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "glmnet",
metric = "ROC",
trControl = trControl,
preProcess = c('center', 'scale'),
## parameters for glmnet()
family = "binomial",
tuneGrid = tuneGrid)
})[3]
ptime
lasso_model
nrow(ards)
#########################################
## Save Trained Models
#########################################
# Save multiple objects
save(file = "trained-models.RData",
lasso_model,
lda_model,
qda_model,
knn_model,
rf_model,
svmLinear_model,
svmPoly_model,
svmRadial_model
)
#########################################
## Save Trained Models
#########################################
# Save multiple objects
save(file = "trained-models.RData",
lasso_model,
lda_model,
#     qda_model,
knn_model,
rf_model,
svmLinear_model,
svmPoly_model,
svmRadial_model
)
cor(ards)
cor(ards[, 4:ncol(ards)])
#########################################
## Set up Parallel Processing
## https://cran.r-project.org/web/packages/doParallel/vignettes/gettingstartedParallel.pdf
##
## system("sysctl hw.ncpu") # total number of cores
## system("sysctl  hw.physicalcpu")  # number of physical CPUs
#########################################
numCores <- parallel::detectCores()
clusters <- makePSOCKcluster(numCores - 2) # Leave some for other important tasks, like browsing reddit
registerDoParallel(clusters)
#########################################
## Load Data
#########################################
#ards <- read.csv(file = "../data/data-imputed-listwise.csv", header = TRUE)
#ards <- read.csv(file = "../data/data-imputed-median.csv", header = TRUE)
ards <- read.csv(file = "../data/data-imputed-knn.csv", header = TRUE)
ards <- ards %>%
select(-"PreECMO_Albumin")
#########################################
## Data Splitting
#########################################
set.seed(21)
trainIndex <- createDataPartition(ards$ECMO_Survival,
p = .75,      ## 75% data in training set
list = FALSE, ## avoids returning data as a list
times = 1)
head(trainIndex)
train <- ards[ trainIndex,]
test  <- ards[-trainIndex,]
#########################################
## Train Control
#########################################
set.seed(21)
#########################################
## Linear Discriminant Analysis
#########################################
set.seed(21)
lda_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "lda",
metric = "ROC",
preProcess = c("center", "scale", "YeoJohnson"),
trControl = trControl)
#########################################
## Load Data
#########################################
#ards <- read.csv(file = "../data/data-imputed-listwise.csv", header = TRUE)
#ards <- read.csv(file = "../data/data-imputed-median.csv", header = TRUE)
ards <- read.csv(file = "../data/data-imputed-knn.csv", header = TRUE)
#########################################
## Data Splitting
#########################################
set.seed(21)
trainIndex <- createDataPartition(ards$ECMO_Survival,
p = .75,      ## 75% data in training set
list = FALSE, ## avoids returning data as a list
times = 1)
head(trainIndex)
train <- ards[ trainIndex,]
test  <- ards[-trainIndex,]
#########################################
## Train Control
#########################################
set.seed(21)
## Pre-Compute CV folds so we can use the same ones for all models
CV_folds <- createMultiFolds(train$ECMO_Survival,
k = 5, # 5-fold cross validation
times = 10 # 10 times
)
trControl <- caret::trainControl(
method = "repeatedcv",
index = CV_folds,
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
#########################################
## Linear Discriminant Analysis
#########################################
set.seed(21)
lda_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "lda",
metric = "ROC",
preProcess = c("center", "scale", "YeoJohnson"),
trControl = trControl)
qda_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "qda",
metric = "ROC",
preProcess = c("center", "scale", "YeoJohnson"),
trControl = trControl)
lda_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "lda",
metric = "ROC",
preProcess = c("center", "scale", "YeoJohnson", "corr"),
trControl = trControl)
#########################################
## Quadratic Discriminant Analysis
## "Rank deficiency in group N" https://stats.stackexchange.com/questions/35071/what-is-rank-deficiency-and-how-to-deal-with-it
#########################################
set.seed(21)
qda_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "qda",
metric = "ROC",
preProcess = c("center", "scale", "YeoJohnson"),
trControl = trControl)
qda_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "qda",
metric = "ROC",
preProcess = c("center", "scale", "YeoJohnson", "corr"),
trControl = trControl)
qda_model
lda_model
#########################################
## Logistic Regression + LASSO
#########################################
set.seed(21)
tuneGrid = expand.grid(alpha = 1, ## LASSO regularization
lambda = seq(0.001,0.1,by = 0.001))
ptime <- system.time({
lasso_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "glmnet",
metric = "ROC",
trControl = trControl,
preProcess = c('center', 'scale', "YeoJohnson", "corr"),
## parameters for glmnet()
family = "binomial",
tuneGrid = tuneGrid)
})[3]
ptime
lasso_model
preProcess <- preProcess = c("center",
"scale",
"YeoJohnson",
"corr"
)
#########################################
## Logistic Regression + LASSO
#########################################
set.seed(21)
tuneGrid = expand.grid(alpha = 1, ## LASSO regularization
lambda = seq(0.001,0.1,by = 0.001))
ptime <- system.time({
lasso_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "glmnet",
metric = "ROC",
trControl = trControl,
preProcess = preProcess,
## parameters for glmnet()
family = "binomial",
tuneGrid = tuneGrid)
})[3]
#########################################
## Train Control
#########################################
set.seed(21)
## Pre-Compute CV folds so we can use the same ones for all models
CV_folds <- createMultiFolds(train$ECMO_Survival,
k = 5, # 5-fold cross validation
times = 10 # 10 times
)
trControl <- caret::trainControl(
method = "repeatedcv",
index = CV_folds,
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
##
preProcess <- preProcess = c("center",
"scale",
"YeoJohnson",
"corr"
)
#########################################
## Logistic Regression + LASSO
#########################################
set.seed(21)
tuneGrid = expand.grid(alpha = 1, ## LASSO regularization
lambda = seq(0.001,0.1,by = 0.001))
ptime <- system.time({
lasso_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "glmnet",
metric = "ROC",
trControl = trControl,
preProcess = preProcess,
## parameters for glmnet()
family = "binomial",
tuneGrid = tuneGrid)
})[3]
ptime
lasso_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "glmnet",
metric = "ROC",
trControl = trControl,
preProcess = c("center",
"scale",
"YeoJohnson",
"corr"
),
## parameters for glmnet()
family = "binomial",
tuneGrid = tuneGrid)
#########################################
## Linear Discriminant Analysis
#########################################
set.seed(21)
lda_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "lda",
metric = "ROC",
preProcess = preProcess,
trControl = trControl)
##
preProcess <- c("center",
"scale",
"YeoJohnson",
"corr"
)
tuneGrid = expand.grid(alpha = 1, ## LASSO regularization
lambda = seq(0.001,0.1,by = 0.001))
ptime <- system.time({
lasso_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "glmnet",
metric = "ROC",
trControl = trControl,
preProcess = preProcess,
## parameters for glmnet()
family = "binomial",
tuneGrid = tuneGrid)
})[3]
#########################################
## Linear Discriminant Analysis
#########################################
set.seed(21)
lda_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "lda",
metric = "ROC",
preProcess = preProcess,
trControl = trControl)
lda_model
## III. Fit a Polynomial SVM kernel
tuneGrid <- expand.grid(degree = 1:4,
scale = 0.1,   # seq(0.1, 1, by = 0.1),
C = 0.1       # seq(0.1, 1, by = 0.1)
)
svmTime3 <- system.time({
svmPoly_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "svmPoly",
metric = "ROC",
preProcess = preProcess,
trControl = trControl,
tuneGrid = tuneGrid,
tuneLength = 10
)
})[3]
svmTime3
svmPoly_model
## Pre-Compute CV folds so we can use the same ones for all models
CV_folds <- createMultiFolds(train$ECMO_Survival,
k = 5, # 5-fold cross validation
times = 10 # 10 times
)
## K-Fold Cross Validation
trControl <- caret::trainControl(
method = "repeatedcv",
index = CV_folds,
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
## How is the data preprocessed?
preProcess <- c("center",    # mean centered
"scale",      # sd = 1
"YeoJohnson", # Trnasform variables
"corr"        # remove correlated variables
)
## Model evaluation metric
metric <- "ROC"
#########################################
## Random Forest
## https://cran.r-project.org/web/packages/randomForest/randomForest.pdf
#########################################
set.seed(21)
tuneGrid <- expand.grid()
mtry <- sqrt(ncol(train))
ptime <- system.time({
rf_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "rf",
metric = metric,
preProcess = preProcess,
trControl = trControl,
#                          tuneGrid = tuneGrid,
tuneLength = 10
)
})[3]
ptime
rf_model
tuneGrid <- expand.grid(mtry = c(1:15),
ntree = c(1000, 1500, 2000, 2500))
tuneGrid <- expand.grid(mtry = c(1:10),
ntree = c(1000, 1500, 2000, 2500))
ptime <- system.time({
rf_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "rf",
metric = metric,
preProcess = preProcess,
trControl = trControl,
tuneGrid = tuneGrid,
tuneLength = 10
)
})[3]
tuneGrid <- expand.grid(mtry = c(1:10))
ptime <- system.time({
rf_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "rf",
metric = metric,
preProcess = preProcess,
trControl = trControl,
tuneGrid = tuneGrid,
ntree = 1000,
tuneLength = 10
)
})[3]
ptime
rf_model
nrow(train)
nrow(test)
450*0.75
#########################################
## Data Splitting
#########################################
set.seed(21)
trainIndex <- createDataPartition(ards$ECMO_Survival,
p = .8,      ## 75% data in training set
list = FALSE, ## avoids returning data as a list
times = 1)
head(trainIndex)
train <- ards[ trainIndex,]
test  <- ards[-trainIndex,]
train$ECMO_Survival == "N"
sum(train$ECMO_Survival == "N")
sum(ards$ECMO_Survival == "N") / 450
sum(train$ECMO_Survival == "N") / nrow(train)
sum(test$ECMO_Survival == "N") / nrow(test)
#########################################
## Load Data
#########################################
#ards <- read.csv(file = "../data/data-imputed-listwise.csv", header = TRUE)
#ards <- read.csv(file = "../data/data-imputed-median.csv", header = TRUE)
ards <- read.csv(file = "../data/data-imputed-knn.csv", header = TRUE)
#########################################
## Data Splitting
#########################################
set.seed(21)
trainIndex <- createDataPartition(ards$ECMO_Survival,
p = .8,      ## 75% data in training set
list = FALSE, ## avoids returning data as a list
times = 1)
head(trainIndex)
train <- ards[ trainIndex,]
test  <- ards[-trainIndex,]
#########################################
## Training Settings
#########################################
set.seed(21)
## Pre-Compute CV folds so we can use the same ones for all models
CV_folds <- createMultiFolds(train$ECMO_Survival,
k = 5, # 5-fold cross validation
times = 10 # 10 times
)
## K-Fold Cross Validation
trControl <- caret::trainControl(
method = "repeatedcv",
index = CV_folds,
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
## How is the data preprocessed?
preProcess <- c("center",    # mean centered
"scale",      # sd = 1
"YeoJohnson", # Trnasform variables
"corr"        # remove correlated variables
)
## Model evaluation metric
metric <- "ROC"
#########################################
## Logistic Regression + LASSO
#########################################
set.seed(21)
tuneGrid = expand.grid(alpha = 1, ## LASSO regularization
lambda = seq(0.001,0.1,by = 0.001))
ptime <- system.time({
lasso_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "glmnet",
metric = metric,
trControl = trControl,
preProcess = preProcess,
family = "binomial",
tuneGrid = tuneGrid)
})[3]
ptime
lasso_model
#########################################
## Linear Discriminant Analysis
#########################################
set.seed(21)
lda_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "lda",
metric = metric,
preProcess = preProcess,
trControl = trControl)
lda_model
#########################################
## Quadratic Discriminant Analysis
## "Rank deficiency in group N" https://stats.stackexchange.com/questions/35071/what-is-rank-deficiency-and-how-to-deal-with-it
#########################################
set.seed(21)
qda_model <- caret::train(ECMO_Survival ~ .,
data = train,
method = "qda",
metric = metric,
preProcess = preProcess,
trControl = trControl)
qda_model
